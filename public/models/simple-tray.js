/** @typedef { typeof import("replicad") } replicadLib */

/** @type {replicadLib} */
const {
  draw,
  makeSolid,
  makeFace,
  assembleWire,
  EdgeFinder,
  drawRoundedRectangle,
} = replicad;

function profileBox(inputProfile, base) {
  const start = inputProfile.blueprint.firstPoint;
  const profile = inputProfile.translate(-start[0], -start[1]);

  const end = profile.blueprint.lastPoint;

  const baseSketch = base.sketchOnPlane();

  // We create the side of the box
  const side = baseSketch.clone().sweepSketch(
    plane => {
      return profile.sketchOnPlane(plane);
    },
    {
      withContact: true,
    }
  );

  // We put all the pieces together
  return makeSolid([
    side,
    // The face generated by sweeping the end of the profile
    makeFace(assembleWire(new EdgeFinder().inPlane("XY", end[1]).find(side))),
    // The face generated by the base
    baseSketch.face(),
  ]);
}

export const defaultParams = {
  width: 80,
  height: 100,
  depth: 40,
  wallThickness: 1.6,
  outerFillet: 5,
  bottomFillet: 5,
};

export default function main({
  width,
  height,
  depth,
  wallThickness,
  outerFillet,
  bottomFillet,
}) {
  const base = drawRoundedRectangle(
    width - 2 * bottomFillet,
    height - 2 * bottomFillet,
    outerFillet
  );

  const profile = draw()
    .line(bottomFillet, bottomFillet)
    .customCorner(bottomFillet)
    .vLine(depth - bottomFillet)
    .hLine(-wallThickness)
    .vLine(-depth + wallThickness / 2 + bottomFillet)
    .customCorner(bottomFillet - wallThickness)
    .lineTo([0, wallThickness])
    .done();

  const shape = profileBox(profile, base).fillet(wallThickness / 3, e =>
    e.inPlane("XY", depth)
  );

  return {
    shape,
    name: "Tray",
  };
}
